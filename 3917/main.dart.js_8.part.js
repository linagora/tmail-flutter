// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.6.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_8", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, A, C,
  B = {
    HtmlContentViewerOnWeb$(allowResizeToDocumentSize, autoAdjustHeight, contentHtml, contentPadding, direction, disableScrolling, enableQuoteToggle, heightContent, htmlContentMinHeight, htmlContentMinWidth, keepAlive, key, mailtoDelegate, offsetHtmlContentHeight, onClickHyperLinkAction, scrollController, useDefaultFont, viewMaxHeight, widthContent) {
      return new B.HtmlContentViewerOnWeb(contentHtml, widthContent, heightContent, direction, contentPadding, useDefaultFont, mailtoDelegate, onClickHyperLinkAction, allowResizeToDocumentSize, scrollController, enableQuoteToggle, disableScrolling, keepAlive, htmlContentMinHeight, htmlContentMinWidth, offsetHtmlContentHeight, viewMaxHeight, autoAdjustHeight, key);
    },
    HtmlContentViewerOnWeb: function HtmlContentViewerOnWeb(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _.contentHtml = t0;
      _.widthContent = t1;
      _.heightContent = t2;
      _.direction = t3;
      _.contentPadding = t4;
      _.useDefaultFont = t5;
      _.mailtoDelegate = t6;
      _.onClickHyperLinkAction = t7;
      _.allowResizeToDocumentSize = t8;
      _.scrollController = t9;
      _.enableQuoteToggle = t10;
      _.disableScrolling = t11;
      _.keepAlive = t12;
      _.htmlContentMinHeight = t13;
      _.htmlContentMinWidth = t14;
      _.offsetHtmlContentHeight = t15;
      _.viewMaxHeight = t16;
      _.autoAdjustHeight = t17;
      _.key = t18;
    },
    _HtmlContentViewerOnWebState: function _HtmlContentViewerOnWebState(t0) {
      var _ = this;
      _.___HtmlContentViewerOnWebState__actualWidth_A = _.___HtmlContentViewerOnWebState__actualHeight_A = _.___HtmlContentViewerOnWebState__createdViewId_A = $;
      _._html_content_viewer_on_web_widget$_htmlData = _._webInit = null;
      _._html_content_viewer_on_web_widget$_isLoading = true;
      _.___HtmlContentViewerOnWebState__onMessageSubscription_F = _.___HtmlContentViewerOnWebState_minHeight_A = $;
      _._html_content_viewer_on_web_widget$_iframeLoaded = false;
      _.AutomaticKeepAliveClientMixin__keepAliveHandle = t0;
      _._framework$_element = _._widget = null;
    },
    _HtmlContentViewerOnWebState__handleContentHeightEvent_closure: function _HtmlContentViewerOnWebState__handleContentHeightEvent_closure(t0, t1) {
      this.$this = t0;
      this.scrollHeightWithBuffer = t1;
    },
    _HtmlContentViewerOnWebState__handleContentHeightEvent_closure0: function _HtmlContentViewerOnWebState__handleContentHeightEvent_closure0(t0) {
      this.$this = t0;
    },
    _HtmlContentViewerOnWebState__handleContentWidthEvent_closure: function _HtmlContentViewerOnWebState__handleContentWidthEvent_closure(t0, t1) {
      this.$this = t0;
      this.docWidth = t1;
    },
    _HtmlContentViewerOnWebState__setUpWeb_closure: function _HtmlContentViewerOnWebState__setUpWeb_closure(t0) {
      this.iframe = t0;
    },
    _HtmlContentViewerOnWebState__setUpWeb_closure0: function _HtmlContentViewerOnWebState__setUpWeb_closure0(t0) {
      this.$this = t0;
    },
    _HtmlContentViewerOnWebState_build_closure: function _HtmlContentViewerOnWebState_build_closure(t0) {
      this.$this = t0;
    },
    _HtmlContentViewerOnWebState__buildHtmlElementView_closure: function _HtmlContentViewerOnWebState__buildHtmlElementView_closure(t0) {
      this.$this = t0;
    },
    __HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin: function __HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin() {
    },
    HtmlUtils_addQuoteToggle(htmlString) {
      var exception, containerDom, t1, t2, blockquotes, currentSearchLevel, lastBlockquote, buttonElement,
        _s9_ = "text/html";
      if (!(C.JSString_methods.contains$1(htmlString, A.RegExp_RegExp("<[a-zA-Z][^>]*>", true, false, false)) && C.JSString_methods.contains$1(htmlString, A.RegExp_RegExp("</[a-zA-Z][^>]*>", true, false, false))))
        return htmlString;
      try {
        new DOMParser().parseFromString(htmlString, _s9_).toString;
      } catch (exception) {
        return htmlString;
      }
      containerDom = new DOMParser().parseFromString('<div class="quote-toggle-container" >' + htmlString + "</div>", _s9_);
      t1 = containerDom.querySelectorAll(".quote-toggle-container > blockquote");
      t1.toString;
      t2 = type$._FrozenElementList_Element;
      blockquotes = new A._FrozenElementList(t1, t2);
      for (currentSearchLevel = 1; blockquotes.get$length(0) === 0;) {
        if (currentSearchLevel >= 3)
          return htmlString;
        t1 = containerDom.querySelectorAll(".quote-toggle-container" + C.JSString_methods.$mul(" > div", currentSearchLevel) + " > blockquote");
        t1.toString;
        blockquotes = new A._FrozenElementList(t1, t2);
        ++currentSearchLevel;
      }
      lastBlockquote = blockquotes.$ti._precomputed1._as(C.NodeList_methods.get$last(blockquotes._nodeList));
      buttonElement = new DOMParser().parseFromString('      <button class="quote-toggle-button collapsed" title="Show trimmed content">\n          <span class="dot"></span>\n          <span class="dot"></span>\n          <span class="dot"></span>\n      </button>', _s9_).querySelector(".quote-toggle-button");
      t1 = lastBlockquote.parentNode;
      if (t1 != null && buttonElement != null)
        t1.insertBefore(buttonElement, lastBlockquote).toString;
      t1 = containerDom.documentElement;
      t1 = t1 == null ? null : J.get$outerHtml$x(t1);
      return t1 == null ? htmlString : t1;
    }
  },
  D;
  J = holdersList[1];
  A = holdersList[0];
  C = holdersList[2];
  B = hunkHelpers.updateHolder(holdersList[12], B);
  D = holdersList[22];
  B.HtmlContentViewerOnWeb.prototype = {
    createState$0() {
      return new B._HtmlContentViewerOnWebState(null);
    }
  };
  B._HtmlContentViewerOnWebState.prototype = {
    initState$0() {
      var t1, _this = this;
      _this.super$__HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin$initState();
      t1 = _this._widget;
      _this.___HtmlContentViewerOnWebState__actualHeight_A = t1.heightContent;
      _this.___HtmlContentViewerOnWebState__actualWidth_A = t1.widthContent;
      _this.___HtmlContentViewerOnWebState_minHeight_A = t1.htmlContentMinHeight;
      _this._html_content_viewer_on_web_widget$_setUpWeb$0();
      t1 = window;
      t1.toString;
      t1 = A._EventStreamSubscription$(t1, "message", _this.get$_handleMessageEvent(), false, type$.MessageEvent);
      _this.___HtmlContentViewerOnWebState__onMessageSubscription_F !== $ && A.throwUnnamedLateFieldAI();
      _this.___HtmlContentViewerOnWebState__onMessageSubscription_F = t1;
    },
    _handleMessageEvent$1($event) {
      var data, viewId, type, e, t1, t2, t3, deltaY, newOffset, exception, _this = this, _null = null;
      try {
        data = C.C_JsonCodec.decode$1(0, new A._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.data, true));
        viewId = J.$index$asx(data, "view");
        t1 = _this.___HtmlContentViewerOnWebState__createdViewId_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        if (!J.$eq$(viewId, t1))
          return;
        type = J.$index$asx(data, "type");
        t1 = type;
        t2 = _this._widget.scrollController;
        t3 = false;
        if (t2 != null)
          if (t2._positions.length !== 0 === true)
            t1 = (t1 == null ? _null : C.JSString_methods.contains$1(t1, "toDart: onScrollChanged")) === true;
          else
            t1 = t3;
        else
          t1 = t3;
        if (t1) {
          t2.toString;
          deltaY = J.$index$asx(data, "deltaY");
          if (deltaY == null)
            deltaY = 0;
          t1 = t2._positions;
          t3 = C.JSArray_methods.get$single(t1)._pixels;
          t3.toString;
          newOffset = t3 + deltaY;
          A.log("_HtmlContentViewerOnWebState::_handleIframeOnScrollChangedListener:deltaY = " + A.S(deltaY) + " | newOffset = " + A.S(newOffset), C.Level_3);
          if (newOffset < C.JSArray_methods.get$single(t1).get$minScrollExtent())
            t2.jumpTo$1(C.JSArray_methods.get$single(t1).get$minScrollExtent());
          else if (newOffset > C.JSArray_methods.get$single(t1).get$maxScrollExtent())
            t2.jumpTo$1(C.JSArray_methods.get$single(t1).get$maxScrollExtent());
          else
            t2.jumpTo$1(newOffset);
          return;
        }
        if (J.$eq$(J.$index$asx(data, "message"), "iframeHasBeenLoaded"))
          _this._html_content_viewer_on_web_widget$_iframeLoaded = true;
        if (!_this._html_content_viewer_on_web_widget$_iframeLoaded)
          return;
        t1 = type;
        if ((t1 == null ? _null : C.JSString_methods.contains$1(t1, "toDart: htmlHeight")) === true)
          _this._handleContentHeightEvent$1(J.$index$asx(data, "height"));
        else {
          t1 = type;
          t1 = (t1 == null ? _null : C.JSString_methods.contains$1(t1, "toDart: htmlWidth")) === true;
          if (t1)
            _this._widget.toString;
          if (t1)
            _this._handleContentWidthEvent$1(J.$index$asx(data, "width"));
          else {
            t1 = type;
            if ((t1 == null ? _null : C.JSString_methods.contains$1(t1, "toDart: OpenLink")) === true) {
              t1 = J.$index$asx(data, "url");
              if (t1 != null && _this._framework$_element != null && typeof t1 == "string" && C.JSString_methods.startsWith$1(t1, "mailto:")) {
                t2 = _this._widget.mailtoDelegate;
                if (t2 != null)
                  t2.call$1(A.Uri_tryParse(t1));
              }
            } else {
              t1 = type;
              if ((t1 == null ? _null : C.JSString_methods.contains$1(t1, "toDart: onClickHyperLink")) === true) {
                t1 = J.$index$asx(data, "url");
                if (t1 != null && _this._framework$_element != null && typeof t1 == "string") {
                  t2 = _this._widget.onClickHyperLinkAction;
                  if (t2 != null)
                    t2.call$1(A.Uri_tryParse(t1));
                }
              }
            }
          }
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        A.log("_HtmlContentViewerOnWebState::_handleMessageEvent:Exception = " + A.S(e), C.Level_1);
      }
    },
    _handleContentHeightEvent$1(height) {
      var t1, docHeight, scrollHeightWithBuffer, t2, t3, isHeightChanged, _this = this;
      if (height == null) {
        t1 = _this.___HtmlContentViewerOnWebState__actualHeight_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        docHeight = t1;
      } else
        docHeight = height;
      t1 = _this._framework$_element;
      if (t1 != null) {
        scrollHeightWithBuffer = J.$add$ansx(docHeight, _this._widget.offsetHtmlContentHeight);
        A.log(A.getRuntimeTypeOfDartObject(_this).toString$0(0) + "::_handleContentHeightEvent: ScrollHeightWithBuffer = " + A.S(scrollHeightWithBuffer), C.Level_3);
        t1 = _this._widget.autoAdjustHeight;
        t2 = J.getInterceptor$n(scrollHeightWithBuffer);
        t3 = _this.___HtmlContentViewerOnWebState_minHeight_A;
        if (t1) {
          t3 === $ && A.throwUnnamedLateFieldNI();
          isHeightChanged = t2.$ge(scrollHeightWithBuffer, t3);
        } else {
          t3 === $ && A.throwUnnamedLateFieldNI();
          isHeightChanged = t2.$gt(scrollHeightWithBuffer, t3);
        }
        if (isHeightChanged)
          _this.setState$1(new B._HtmlContentViewerOnWebState__handleContentHeightEvent_closure(_this, scrollHeightWithBuffer));
      }
      if (_this._framework$_element != null && _this._html_content_viewer_on_web_widget$_isLoading)
        _this.setState$1(new B._HtmlContentViewerOnWebState__handleContentHeightEvent_closure0(_this));
    },
    _handleContentWidthEvent$1(width) {
      var t1, docWidth, _this = this;
      if (width == null) {
        t1 = _this.___HtmlContentViewerOnWebState__actualWidth_A;
        t1 === $ && A.throwUnnamedLateFieldNI();
        docWidth = t1;
      } else
        docWidth = width;
      if (_this._framework$_element != null && J.$gt$n(docWidth, _this._widget.htmlContentMinWidth) && _this._widget.allowResizeToDocumentSize)
        _this.setState$1(new B._HtmlContentViewerOnWebState__handleContentWidthEvent_closure(_this, docWidth));
    },
    didUpdateWidget$1(oldWidget) {
      var t1, t2, _this = this;
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.direction;
      A.log("_HtmlContentViewerOnWebState::didUpdateWidget():Old-Direction: " + t1.toString$0(0) + " | Current-Direction: " + _this._widget.direction.toString$0(0), C.Level_3);
      t2 = _this._widget;
      if (t2.contentHtml !== oldWidget.contentHtml || t2.direction !== t1)
        _this._html_content_viewer_on_web_widget$_setUpWeb$0();
      t1 = _this._widget;
      t2 = t1.heightContent;
      if (t2 !== oldWidget.heightContent)
        _this.___HtmlContentViewerOnWebState__actualHeight_A = t2;
      t1 = t1.widthContent;
      if (t1 !== oldWidget.widthContent)
        _this.___HtmlContentViewerOnWebState__actualWidth_A = t1;
    },
    _getRandString$1(len) {
      var i,
        random = $.$get$Random__secureRandom(),
        values = J.JSArray_JSArray$allocateGrowable(len, type$.int);
      for (i = 0; i < len; ++i)
        values[i] = random.nextInt$1(255);
      return C.Base64Codec_Base64Encoder_true.get$encoder().convert$1(values);
    },
    _html_content_viewer_on_web_widget$_setUpWeb$0() {
      var t9, t10, combinedCss, combinedScripts, _this = this,
        _s22_ = "\n          \n          ",
        t1 = _this.___HtmlContentViewerOnWebState__createdViewId_A = _this._getRandString$1(10),
        t2 = _this._widget,
        processedContent = t2.contentHtml,
        t3 = !t2.autoAdjustHeight,
        t4 = t3 ? '          const resizeObserver = new ResizeObserver((entries) => {\n            var height = document.body.scrollHeight;\n            window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "type": "toDart: htmlHeight", "height": height}), "*");\n          });\n        ' : "",
        t5 = t2.mailtoDelegate != null,
        t6 = t5 ? '                function handleOnClickEmailLink(e) {\n                   var href = this.href;\n                   window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "type": "toDart: OpenLink", "url": "" + href}), "*");\n                   e.preventDefault();\n                }\n              ' : "",
        t7 = t2.onClickHyperLinkAction != null,
        t8 = t7 ? '                function onClickHyperLink(e) {\n                   var href = this.href;\n                   window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "type": "toDart: onClickHyperLink", "url": "" + href}), "*");\n                   e.preventDefault();\n                }\n              ' : "";
      t7 = t7 ? "                  var hyperLinks = document.querySelectorAll('a');\n                  for (var i=0; i < hyperLinks.length; i++){\n                      hyperLinks[i].addEventListener('click', onClickHyperLink);\n                  }\n                " : "";
      t5 = t5 ? "                  var emailLinks = document.querySelectorAll('a[href^=\"mailto:\"]');\n                  for (var i=0; i < emailLinks.length; i++){\n                      emailLinks[i].addEventListener('click', handleOnClickEmailLink);\n                  }\n                " : "";
      t3 = t3 ? "resizeObserver.observe(document.body);" : "";
      t9 = t2.scrollController != null ? '          window.addEventListener(\'wheel\', function (event) {\n            const deltaY = event.deltaY;\n            window.parent.postMessage(JSON.stringify({\n              "view": "' + t1 + '",\n              "type": "toDart: onScrollChanged",\n              "deltaY": deltaY\n            }), "*");\n          });\n        ' : "";
      if (t2.enableQuoteToggle)
        processedContent = B.HtmlUtils_addQuoteToggle(processedContent);
      t2 = type$.JSArray_String;
      t10 = A._setArrayType(["    .tmail-tooltip .tooltiptext {\n      visibility: hidden;\n      max-width: 400px;\n      background-color: black;\n      color: #fff;\n      text-align: center;\n      border-radius: 6px;\n      padding: 5px 8px 5px 8px;\n      white-space: nowrap; \n      overflow: hidden;\n      text-overflow: ellipsis;\n      position: absolute;\n      z-index: 1;\n    }\n    .tmail-tooltip:hover .tooltiptext {\n      visibility: visible;\n    }\n  "], t2);
      if (_this._widget.enableQuoteToggle)
        t10.push("    <style>\n      .quote-toggle-button + blockquote {\n        display: block; /* Default display */\n      }\n      .quote-toggle-button.collapsed + blockquote {\n        display: none;\n      }\n      .quote-toggle-button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 20px;\n        height: 20px;\n        gap: 2px;\n        background-color: #d7e2f5;\n        padding: 0;\n        margin: 8px 0;\n        border-radius: 50%;\n        transition: background-color 0.2s ease-in-out;\n        border: none;\n        cursor: pointer;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n        -webkit-user-select: none; /* Safari */\n        -moz-user-select: none; /* Firefox */\n        -ms-user-select: none; /* IE 10+ */\n        user-select: none; /* Standard syntax */\n        -webkit-user-drag: none; /* Prevent dragging on WebKit browsers (e.g., Chrome, Safari) */\n      }\n      .quote-toggle-button:hover {\n        background-color: #cdcdcd !important;\n      }\n      .dot {\n        width: 3.75px;\n        height: 3.75px;\n        background-color: #55687d;\n        border-radius: 50%;\n      }\n    </style>");
      if (_this._widget.disableScrolling)
        t10.push("    html, body {\n      overflow: hidden;\n      overscroll-behavior: none;\n      scrollbar-width: none; /* Firefox */\n      -ms-overflow-style: none; /* IE/Edge */\n    }\n    ::-webkit-scrollbar {\n        display: none;\n      }\n  ");
      combinedCss = C.JSArray_methods.join$0(t10);
      t1 = A._setArrayType(["      <script type=\"text/javascript\">\n        window.parent.addEventListener('message', handleMessage, false);\n        window.addEventListener('load', handleOnLoad);\n        window.addEventListener('pagehide', (event) => {\n          window.parent.removeEventListener('message', handleMessage, false);\n        });\n      \n        function handleMessage(e) {\n          if (e && e.data && e.data.includes(\"toIframe:\")) {\n            var data = JSON.parse(e.data);\n            if (data[\"view\"].includes(\"" + t1 + '")) {\n              if (data["type"].includes("getHeight")) {\n                var height = document.body.scrollHeight;\n                window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "type": "toDart: htmlHeight", "height": height}), "*");\n              }\n              if (data["type"].includes("getWidth")) {\n                var width = document.body.scrollWidth;\n                window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "type": "toDart: htmlWidth", "width": width}), "*");\n              }\n              if (data["type"].includes("execCommand")) {\n                if (data["argument"] === null) {\n                  document.execCommand(data["command"], false);\n                } else {\n                  document.execCommand(data["command"], false, data["argument"]);\n                }\n              }\n            }\n          }\n        }\n\n        ' + t4 + "\n        \n        " + t6 + "\n        \n        \n        \n        " + t8 + '\n        \n        function handleOnLoad() {\n          window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "message": "iframeHasBeenLoaded"}), "*");\n          window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "type": "toIframe: getHeight"}), "*");\n          window.parent.postMessage(JSON.stringify({"view": "' + t1 + '", "type": "toIframe: getWidth"}), "*");\n          \n          ' + t7 + _s22_ + t5 + _s22_ + t3 + "\n        }\n        \n        " + t9 + "\n      </script>\n    ", "    <script type=\"text/javascript\">\n      document.addEventListener('wheel', function(e) {\n        e.ctrlKey && e.preventDefault();\n      }, {\n        passive: false,\n      });\n      window.addEventListener('keydown', function(e) {\n        if (event.metaKey || event.ctrlKey) {\n          switch (event.key) {\n            case '=':\n            case '-':\n              event.preventDefault();\n              break;\n          }\n        }\n      });\n    </script>\n  ", "    <script>\n      const lazyImages = document.querySelectorAll('[lazy]');\n      const lazyImageObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const lazyImage = entry.target;\n            const src = lazyImage.dataset.src;\n            lazyImage.tagName.toLowerCase() === 'img'\n              ? lazyImage.src = src\n              : lazyImage.style.backgroundImage = \"url('\" + src + \"')\";\n            lazyImage.removeAttribute('lazy');\n            observer.unobserve(lazyImage);\n          }\n        });\n      });\n      \n      lazyImages.forEach((lazyImage) => {\n        lazyImageObserver.observe(lazyImage);\n      });\n    </script>\n  ", '      <script type="text/javascript">\n        const displayWidth = ' + A.S(_this._widget.widthContent) + ";\n    \n        const sizeUnits = ['px', 'in', 'cm', 'mm', 'pt', 'pc'];\n    \n        function convertToPx(value, unit) {\n          switch (unit.toLowerCase()) {\n            case 'px': return value;\n            case 'in': return value * 96;\n            case 'cm': return value * 37.8;\n            case 'mm': return value * 3.78;\n            case 'pt': return value * (96 / 72);\n            case 'pc': return value * (96 / 6);\n            default: return value;\n          }\n        }\n    \n        function removeWidthHeightFromStyle(style) {\n          // Remove width and height properties from style string\n          style = style.replace(/width\\s*:\\s*[\\d.]+[a-zA-Z%]+\\s*;?/gi, '');\n          style = style.replace(/height\\s*:\\s*[\\d.]+[a-zA-Z%]+\\s*;?/gi, '');\n          style = style.trim();\n          if (style.length && !style.endsWith(';')) {\n            style += ';';\n          }\n          return style;\n        }\n    \n        function extractWidthHeightFromStyle(style) {\n          // Extract width and height values with units from style string\n          const result = {};\n          const widthMatch = style.match(/width\\s*:\\s*([\\d.]+)([a-zA-Z%]+)\\s*;?/);\n          const heightMatch = style.match(/height\\s*:\\s*([\\d.]+)([a-zA-Z%]+)\\s*;?/);\n    \n          if (widthMatch) {\n            const value = parseFloat(widthMatch[1]);\n            const unit = widthMatch[2];\n            if (!isNaN(value) && unit) {\n              result['width'] = { value, unit };\n            }\n          }\n    \n          if (heightMatch) {\n            const value = parseFloat(heightMatch[1]);\n            const unit = heightMatch[2];\n            if (!isNaN(value) && unit) {\n              result['height'] = { value, unit };\n            }\n          }\n    \n          return result;\n        }\n    \n        function normalizeStyleAttribute(attrs) {\n          // Normalize style attribute to ensure proper responsive behavior\n          let style = attrs['style'];\n          \n          if (!style) {\n            attrs['style'] = 'max-width:100%;height:auto;display:inline;';\n            return;\n          }\n    \n          style = style.trim();\n          const dimensions = extractWidthHeightFromStyle(style);\n          const hasWidth = dimensions.hasOwnProperty('width');\n    \n          if (hasWidth) {\n            const widthData = dimensions['width'];\n            const widthPx = convertToPx(widthData.value, widthData.unit);\n    \n            if (displayWidth !== undefined &&\n                widthPx > displayWidth &&\n                sizeUnits.includes(widthData.unit)) {\n              style = removeWidthHeightFromStyle(style).trim();\n            }\n          }\n    \n          // Ensure proper style string formatting\n          if (style.length && !style.endsWith(';')) {\n            style += ';';\n          }\n    \n          // Add responsive defaults if missing\n          if (!style.includes('max-width')) {\n            style += 'max-width:100%;';\n          }\n    \n          if (!style.includes('height')) {\n            style += 'height:auto;';\n          }\n    \n          if (!style.includes('display')) {\n            style += 'display:inline;';\n          }\n    \n          attrs['style'] = style;\n        }\n    \n        function normalizeWidthHeightAttribute(attrs) {\n          // Normalize width/height attributes and remove if necessary\n          const widthStr = attrs['width'];\n          const heightStr = attrs['height'];\n    \n          // Remove attribute if value is null or undefined\n          if (widthStr === null || widthStr === undefined) {\n            delete attrs['width'];\n          } else if (displayWidth !== undefined) {\n            const widthValue = parseFloat(widthStr);\n            if (!isNaN(widthValue)) {\n              if (widthValue > displayWidth) {\n                delete attrs['width'];\n                delete attrs['height'];\n              }\n            }\n          }\n    \n          // Remove height attribute if value is null or undefined\n          if (heightStr === null || heightStr === undefined) {\n            delete attrs['height'];\n          }\n        }\n    \n        function normalizeImageSize(attrs) {\n          // Apply both style and attribute normalization\n          normalizeWidthHeightAttribute(attrs);\n          normalizeStyleAttribute(attrs);\n        }\n    \n        function applyImageNormalization() {\n          // Process all images on the page\n          document.querySelectorAll('img').forEach(img => {\n            const attrs = {\n              style: img.getAttribute('style'),\n              width: img.getAttribute('width'),\n              height: img.getAttribute('height')\n            };\n    \n            normalizeImageSize(attrs);\n    \n            // Handle style attribute\n            if (attrs.style !== null && attrs.style !== undefined) {\n              img.setAttribute('style', attrs.style);\n            } else {\n              img.removeAttribute('style');\n            }\n    \n            // Handle width attribute\n            if ('width' in attrs && attrs.width !== null && attrs.width !== undefined) {\n              img.setAttribute('width', attrs.width);\n            } else {\n              img.removeAttribute('width');\n            }\n    \n            // Handle height attribute\n            if ('height' in attrs && attrs.height !== null && attrs.height !== undefined) {\n              img.setAttribute('height', attrs.height);\n            } else {\n              img.removeAttribute('height');\n            }\n          });\n        }\n        \n        function safeApplyImageNormalization() {\n          // Error-safe wrapper for the normalization function\n          try {\n            applyImageNormalization();\n          } catch (e) {\n            console.error('Image normalization failed:', e);\n          }\n        }\n        \n        // Run normalization when page loads\n        window.onload = safeApplyImageNormalization;\n      </script>\n    "], t2);
      if (_this._widget.enableQuoteToggle)
        t1.push("    <script>\n      document.addEventListener('DOMContentLoaded', function() {\n        const buttons = document.querySelectorAll('.quote-toggle-button');\n        buttons.forEach(button => {\n          button.onclick = function() {\n            const blockquote = this.nextElementSibling;\n            if (blockquote && blockquote.tagName === 'BLOCKQUOTE') {\n              this.classList.toggle('collapsed');\n              if (this.classList.contains('collapsed')) {\n                this.title = 'Show trimmed content';\n              } else {\n                this.title = 'Hide expanded content';\n              }\n            }\n          };\n        });\n      });\n    </script>");
      combinedScripts = C.JSArray_methods.join$0(t1);
      t1 = _this.___HtmlContentViewerOnWebState_minHeight_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t2 = _this._widget;
      t3 = t2.htmlContentMinWidth;
      t4 = t2.direction;
      t5 = t2.contentPadding;
      t2 = t2.useDefaultFont;
      t2;
      t6 = "";
      t2 = t2 ? "          body {\n            font-family: 'Inter', sans-serif;\n            font-weight: 500;\n            font-size: 16px;\n            line-height: 24px;\n          }\n        " : "";
      t4 = t4 === C.TextDirection_0 ? 'dir="rtl"' : "";
      t5 = t5 != null ? "margin: " + A.S(t5) + ";" : "";
      _this._html_content_viewer_on_web_widget$_htmlData = '      <!DOCTYPE html>\n      <html>\n      <head>\n      <meta name="viewport" content="width=device-width, initial-scale=1.0">\n      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">\n      ' + t6 + "\n      <style>\n        " + t2 + "\n        .tmail-content {\n          min-height: " + A.S(t1) + "px;\n          min-width: " + t3 + "px;\n          overflow: auto;\n          overflow-wrap: break-word;\n          word-break: break-word;\n        }\n                  .tmail-content::-webkit-scrollbar {\n            display: none;\n          }\n          .tmail-content {\n            -ms-overflow-style: none;  /* IE and Edge */\n            scrollbar-width: none;  /* Firefox */\n          }\n        \n        \n        pre {\n          white-space: pre-wrap;\n        }\n        \n        table {\n          white-space: normal !important;\n        }\n        \n        " + combinedCss + "\n      </style>\n      </head>\n      <body " + t4 + ' style = "overflow-x: hidden; ' + t5 + '";>\n      <div class="tmail-content">' + processedContent + "</div>\n      " + combinedScripts + "\n      </body>\n      </html> \n    ";
      t1 = document.createElement("iframe");
      t1.toString;
      t2 = _this.___HtmlContentViewerOnWebState__actualWidth_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t1.width = C.JSNumber_methods.toString$0(t2);
      t2 = _this.___HtmlContentViewerOnWebState__actualHeight_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t1.height = C.JSNumber_methods.toString$0(t2);
      t2 = _this._html_content_viewer_on_web_widget$_htmlData;
      t1.srcdoc = t2 == null ? "" : t2;
      t2 = t1.style;
      t2.border = "none";
      t2 = t1.style;
      t2.overflow = "hidden";
      t2 = t1.style;
      t2.width = "100%";
      t2 = t1.style;
      t2.height = "100%";
      $.$get$platformViewRegistry();
      t2 = _this.___HtmlContentViewerOnWebState__createdViewId_A;
      $.$get$PlatformViewManager_instance().registerFactory$3$isVisible(t2, new B._HtmlContentViewerOnWebState__setUpWeb_closure(t1), true);
      if (_this._framework$_element != null)
        _this.setState$1(new B._HtmlContentViewerOnWebState__setUpWeb_closure0(_this));
    },
    build$1(context) {
      var _this = this;
      _this.super$AutomaticKeepAliveClientMixin$build(context);
      if (_this._widget.autoAdjustHeight)
        return _this._buildHtmlElementView$0();
      else
        return new A.LayoutBuilder(new B._HtmlContentViewerOnWebState_build_closure(_this), null);
    },
    _buildHtmlElementView$0() {
      var child, _this = this, _null = null,
        t1 = A.getRuntimeTypeOfDartObject(_this).toString$0(0),
        t2 = _this.___HtmlContentViewerOnWebState__actualHeight_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      A.log(t1 + "::_buildHtmlElementView: ActualHeight: " + A.S(t2), C.Level_3);
      t2 = A._setArrayType([], type$.JSArray_Widget);
      t1 = _this._html_content_viewer_on_web_widget$_htmlData;
      if ((t1 == null ? _null : C.JSString_methods.trim$0(t1).length !== 0) === true)
        t2.push(A.FutureBuilder$(new B._HtmlContentViewerOnWebState__buildHtmlElementView_closure(_this), _this._webInit, type$.bool));
      if (_this._html_content_viewer_on_web_widget$_isLoading)
        t2.push(D.Align_yur);
      child = new A.Stack(C.AlignmentDirectional_m1_m1, _null, C.StackFit_0, C.Clip_1, t2, _null);
      _this._widget.toString;
      t1 = _this.___HtmlContentViewerOnWebState__actualWidth_A;
      t1 === $ && A.throwUnnamedLateFieldNI();
      return new A.SizedBox(t1, _null, child, _null);
    },
    dispose$0() {
      this._html_content_viewer_on_web_widget$_htmlData = null;
      var t1 = this.___HtmlContentViewerOnWebState__onMessageSubscription_F;
      t1 === $ && A.throwUnnamedLateFieldNI();
      t1.cancel$0(0);
      this.super$State$dispose();
    },
    get$wantKeepAlive() {
      return this._widget.keepAlive;
    }
  };
  B.__HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin.prototype = {
    initState$0() {
      this.super$State$initState();
      if (this._widget.keepAlive)
        this._ensureKeepAlive$0();
    },
    deactivate$0() {
      var t1 = this.AutomaticKeepAliveClientMixin__keepAliveHandle;
      if (t1 != null) {
        t1.notifyListeners$0();
        t1.super$ChangeNotifier$dispose();
        this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
      }
      this.super$State$deactivate();
    }
  };
  var typesOffset = hunkHelpers.updateTypes(["~(MessageEvent)"]);
  B._HtmlContentViewerOnWebState__handleContentHeightEvent_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.___HtmlContentViewerOnWebState__actualHeight_A = this.scrollHeightWithBuffer;
      t1._html_content_viewer_on_web_widget$_isLoading = false;
    },
    $signature: 0
  };
  B._HtmlContentViewerOnWebState__handleContentHeightEvent_closure0.prototype = {
    call$0() {
      this.$this._html_content_viewer_on_web_widget$_isLoading = false;
    },
    $signature: 0
  };
  B._HtmlContentViewerOnWebState__handleContentWidthEvent_closure.prototype = {
    call$0() {
      return this.$this.___HtmlContentViewerOnWebState__actualWidth_A = this.docWidth;
    },
    $signature: 0
  };
  B._HtmlContentViewerOnWebState__setUpWeb_closure.prototype = {
    call$1(viewId) {
      return this.iframe;
    },
    $signature: 719
  };
  B._HtmlContentViewerOnWebState__setUpWeb_closure0.prototype = {
    call$0() {
      this.$this._webInit = A.Future_Future$value(true, type$.bool);
    },
    $signature: 0
  };
  B._HtmlContentViewerOnWebState_build_closure.prototype = {
    call$2(_, constraint) {
      var t1 = this.$this,
        t2 = t1.___HtmlContentViewerOnWebState_minHeight_A;
      t2 === $ && A.throwUnnamedLateFieldNI();
      t1.___HtmlContentViewerOnWebState_minHeight_A = Math.min(constraint.maxHeight, t2);
      return t1._buildHtmlElementView$0();
    },
    $signature: 273
  };
  B._HtmlContentViewerOnWebState__buildHtmlElementView_closure.prototype = {
    call$2(_, snapshot) {
      var t1, t2, t3, t4, htmlView, _null = null;
      if (snapshot.data != null) {
        t1 = this.$this;
        t2 = t1._html_content_viewer_on_web_widget$_htmlData;
        t3 = A.S(t1._widget.key);
        t4 = t1.___HtmlContentViewerOnWebState__createdViewId_A;
        t4 === $ && A.throwUnnamedLateFieldNI();
        htmlView = new A.HtmlElementView(t4, _null, _null, new A.ValueKey(A.S(t2) + "-" + t3, type$.ValueKey_String));
        t2 = t1._widget.viewMaxHeight;
        t3 = t1.___HtmlContentViewerOnWebState__actualHeight_A;
        t1 = t1.___HtmlContentViewerOnWebState__actualWidth_A;
        if (t2 != null) {
          t3 === $ && A.throwUnnamedLateFieldNI();
          t1 === $ && A.throwUnnamedLateFieldNI();
          return A.Container$(_null, htmlView, C.Clip_0, _null, new A.BoxConstraints(0, 1 / 0, 0, t2), _null, _null, t3, _null, _null, _null, _null, _null, t1);
        } else {
          t3 === $ && A.throwUnnamedLateFieldNI();
          t1 === $ && A.throwUnnamedLateFieldNI();
          return new A.SizedBox(t1, t3, htmlView, _null);
        }
      } else
        return C.SizedBox_0_0_null_null;
    },
    $signature: 194
  };
  (function aliases() {
    var _ = B.__HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin.prototype;
    _.super$__HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin$initState = _.initState$0;
  })();
  (function installTearOffs() {
    var _instance_1_u = hunkHelpers._instance_1u;
    _instance_1_u(B._HtmlContentViewerOnWebState.prototype, "get$_handleMessageEvent", "_handleMessageEvent$1", 0);
  })();
  (function inheritance() {
    var _mixinHard = hunkHelpers.mixinHard,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(B.HtmlContentViewerOnWeb, A.StatefulWidget);
    _inherit(B.__HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin, A.State0);
    _inherit(B._HtmlContentViewerOnWebState, B.__HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin);
    _inheritMany(A.Closure0Args, [B._HtmlContentViewerOnWebState__handleContentHeightEvent_closure, B._HtmlContentViewerOnWebState__handleContentHeightEvent_closure0, B._HtmlContentViewerOnWebState__handleContentWidthEvent_closure, B._HtmlContentViewerOnWebState__setUpWeb_closure0]);
    _inherit(B._HtmlContentViewerOnWebState__setUpWeb_closure, A.Closure);
    _inheritMany(A.Closure2Args, [B._HtmlContentViewerOnWebState_build_closure, B._HtmlContentViewerOnWebState__buildHtmlElementView_closure]);
    _mixinHard(B.__HtmlContentViewerOnWebState_State_AutomaticKeepAliveClientMixin, A.AutomaticKeepAliveClientMixin);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"HtmlContentViewerOnWeb":{"StatefulWidget":[],"Widget":[],"DiagnosticableTree":[]},"_HtmlContentViewerOnWebState":{"State0":["HtmlContentViewerOnWeb"]}}'));
  var type$ = {
    JSArray_String: A.findType("JSArray<String>"),
    JSArray_Widget: A.findType("JSArray<Widget>"),
    MessageEvent: A.findType("MessageEvent"),
    ValueKey_String: A.findType("ValueKey<String>"),
    _FrozenElementList_Element: A.findType("_FrozenElementList<Element1>"),
    bool: A.findType("bool"),
    int: A.findType("int")
  };
  (function constants() {
    D.SizedBox_0U80 = new A.SizedBox(30, 30, C.CupertinoActivityIndicator_DQZ, null);
    D.Padding_YVI = new A.Padding(C.EdgeInsets_16_16_16_16, D.SizedBox_0U80, null);
    D.Align_yur = new A.Align(C.Alignment_0_m1, null, null, D.Padding_YVI, null);
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_8", e: "endPart", h: h});
})($__dart_deferred_initializers__, "ni2NziGsz/lnn92sZuK6OBqVpmk=");
;