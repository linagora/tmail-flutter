// Generated by dart2js (NullSafetyMode.sound, trust primitives, omit checks, lax runtime type, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.6.2.
((s, d, e) => {
  s[d] = s[d] || {};
  s[d][e] = s[d][e] || [];
  s[d][e].push({p: "main.dart.js_3", e: "beginPart"});
})(self, "$__dart_deferred_initializers__", "eventLog");
$__dart_deferred_initializers__.current = function(hunkHelpers, init, holdersList, $) {
  var J, A, C,
  B = {ImageLoaderMixin: function ImageLoaderMixin() {
    }, ImageLoaderMixin_buildImage_closure: function ImageLoaderMixin_buildImage_closure() {
    }, ImageLoaderMixin_buildImage_closure0: function ImageLoaderMixin_buildImage_closure0() {
    }, ImageLoaderMixin_buildImage_closure1: function ImageLoaderMixin_buildImage_closure1(t0, t1) {
      this.$this = t0;
      this.imageSize = t1;
    },
    _httpClient() {
      return new self.XMLHttpRequest();
    },
    NetworkImage: function NetworkImage(t0, t1, t2) {
      this.url = t0;
      this.scale = t1;
      this.headers = t2;
    },
    NetworkImage__loadAsync_closure: function NetworkImage__loadAsync_closure(t0, t1, t2) {
      this.request = t0;
      this.completer = t1;
      this.resolved = t2;
    },
    NetworkImage__loadAsync_closure0: function NetworkImage__loadAsync_closure0(t0) {
      this.completer = t0;
    },
    NetworkImage__loadAsync_closure1: function NetworkImage__loadAsync_closure1(t0) {
      this.chunkEvents = t0;
    },
    NetworkImageLoadException$(statusCode, uri) {
      return new B.NetworkImageLoadException("HTTP request failed, statusCode: " + statusCode + ", " + uri.toString$0(0));
    },
    NetworkImageLoadException: function NetworkImageLoadException(t0) {
      this._image_provider$_message = t0;
    },
    ImageChunkEvent: function ImageChunkEvent(t0, t1) {
      this.cumulativeBytesLoaded = t0;
      this.expectedTotalBytes = t1;
    },
    _ImageChunkEvent_Object_Diagnosticable: function _ImageChunkEvent_Object_Diagnosticable() {
    },
    SvgNetworkLoader: function SvgNetworkLoader(t0, t1, t2, t3, t4) {
      var _ = this;
      _.url = t0;
      _.headers = t1;
      _._loaders$_httpClient = t2;
      _.theme = t3;
      _.colorMapper = t4;
    },
    ApplicationLogoWidthTextWidget$(iconSize, onTapAction) {
      var t1;
      $.$get$Get();
      t1 = $.GetInstance__getInstance;
      if (t1 == null)
        t1 = $.GetInstance__getInstance = C.C_GetInstance;
      return new B.ApplicationLogoWidthTextWidget(t1.find$1$1$tag(0, null, type$.ImagePaths), onTapAction, iconSize, null);
    },
    ApplicationLogoWidthTextWidget: function ApplicationLogoWidthTextWidget(t0, t1, t2, t3) {
      var _ = this;
      _._application_logo_with_text_widget$_imagePaths = t0;
      _.onTapAction = t1;
      _.iconSize = t2;
      _.key = t3;
    }
  },
  D;
  J = holdersList[1];
  A = holdersList[0];
  C = holdersList[2];
  B = hunkHelpers.updateHolder(holdersList[11], B);
  D = holdersList[19];
  B.ImageLoaderMixin.prototype = {
    buildImage$2$imagePath$imageSize(imagePath, imageSize) {
      var _null = null;
      if (this.isImageNetworkLink$1(imagePath) && C.JSString_methods.endsWith$1(imagePath, "svg"))
        return new A.SvgPicture(imageSize, imageSize, C.BoxFit_0, C.Alignment_0_0, new B.SvgNetworkLoader(imagePath, _null, _null, _null, _null), new B.ImageLoaderMixin_buildImage_closure(), _null, _null);
      else if (this.isImageNetworkLink$1(imagePath))
        return new A.Image(A.ResizeImage_resizeIfNeeded(_null, _null, new B.NetworkImage(imagePath, 1, _null)), new B.ImageLoaderMixin_buildImage_closure0(), new B.ImageLoaderMixin_buildImage_closure1(this, imageSize), imageSize, imageSize, C.BoxFit_0, _null);
      else if (C.JSString_methods.endsWith$1(imagePath, "svg"))
        return A.SvgPicture$asset(imagePath, C.Alignment_0_0, _null, C.BoxFit_1, imageSize, _null, _null, imageSize);
      else
        return new A.Image(A.ResizeImage_resizeIfNeeded(_null, _null, new A.AssetImage(imagePath, _null, _null)), _null, _null, imageSize, imageSize, C.BoxFit_0, _null);
    },
    isImageNetworkLink$1(imagePath) {
      return C.JSString_methods.startsWith$1(imagePath, "http") || C.JSString_methods.startsWith$1(imagePath, "https");
    }
  };
  B.NetworkImage.prototype = {
    obtainKey$1(configuration) {
      return new A.SynchronousFuture(this, type$.SynchronousFuture_NetworkImage);
    },
    loadBuffer$2(key, decode) {
      var _null = null,
        chunkEvents = A.StreamController_StreamController(_null, _null, _null, _null, false, type$.ImageChunkEvent);
      return A.MultiFrameImageStreamCompleter$(new A._ControllerStream(chunkEvents, A._instanceType(chunkEvents)._eval$1("_ControllerStream<1>")), this.__network_image_web$_loadAsync$3(key, decode, chunkEvents), key.url, _null, key.scale);
    },
    loadImage$2(key, decode) {
      var _null = null,
        chunkEvents = A.StreamController_StreamController(_null, _null, _null, _null, false, type$.ImageChunkEvent);
      return A.MultiFrameImageStreamCompleter$(new A._ControllerStream(chunkEvents, A._instanceType(chunkEvents)._eval$1("_ControllerStream<1>")), this.__network_image_web$_loadAsync$3(key, decode, chunkEvents), key.url, _null, key.scale);
    },
    __network_image_web$_loadAsync$3(key, decode, chunkEvents) {
      return this._loadAsync$body$NetworkImage(key, decode, chunkEvents);
    },
    _loadAsync$body$NetworkImage(key, decode, chunkEvents) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.Codec),
        $async$returnValue, completer, request, bytes, t1, resolved, t2, $async$temp1;
      var $async$__network_image_web$_loadAsync$3 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = key.url;
              resolved = A.Uri_base().resolve$1(t1);
              t2 = self;
              t2 = t2.window.flutterCanvasKit != null || t2.window._flutter_skwasmInstance != null;
              $async$goto = t2 ? 3 : 5;
              break;
            case 3:
              // then
              t2 = new A._Future($.Zone__current, type$._Future_JSObject);
              completer = new A._AsyncCompleter(t2, type$._AsyncCompleter_JSObject);
              request = B._httpClient();
              request.open("GET", t1, true);
              request.responseType = "arraybuffer";
              request.addEventListener("load", A._functionToJS1(new B.NetworkImage__loadAsync_closure(request, completer, resolved)));
              request.addEventListener("error", A._functionToJS1(new B.NetworkImage__loadAsync_closure0(completer)));
              request.send();
              $async$goto = 6;
              return A._asyncAwait(t2, $async$__network_image_web$_loadAsync$3);
            case 6:
              // returning from await.
              t1 = request.response;
              t1.toString;
              bytes = A.NativeUint8List_NativeUint8List$view(type$.NativeByteBuffer._as(t1), 0, null);
              if (bytes.byteLength === 0)
                throw A.wrapException(B.NetworkImageLoadException$(A.getProperty(request, "status"), resolved));
              $async$temp1 = decode;
              $async$goto = 7;
              return A._asyncAwait(A.ImmutableBuffer_fromUint8List(bytes), $async$__network_image_web$_loadAsync$3);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.call$1($async$result);
              // goto return
              $async$goto = 1;
              break;
              // goto join
              $async$goto = 4;
              break;
            case 5:
              // else
              $async$returnValue = $.$get$_renderer().instantiateImageCodecFromUrl$2$chunkCallback(resolved, new B.NetworkImage__loadAsync_closure1(chunkEvents));
              // goto return
              $async$goto = 1;
              break;
            case 4:
              // join
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$__network_image_web$_loadAsync$3, $async$completer);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (J.get$runtimeType$(other) !== A.getRuntimeTypeOfDartObject(this))
        return false;
      return other instanceof B.NetworkImage && other.url === this.url && other.scale === this.scale;
    },
    get$hashCode(_) {
      return A.Object_hash(this.url, this.scale, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    toString$0(_) {
      return 'NetworkImage("' + this.url + '", scale: ' + C.JSInt_methods.toStringAsFixed$1(this.scale, 1) + ")";
    }
  };
  B.NetworkImageLoadException.prototype = {
    toString$0(_) {
      return this._image_provider$_message;
    },
    $isException: 1
  };
  B.ImageChunkEvent.prototype = {};
  B._ImageChunkEvent_Object_Diagnosticable.prototype = {};
  B.SvgNetworkLoader.prototype = {
    prepareMessage$1(context) {
      return this.prepareMessage$body$SvgNetworkLoader(context);
    },
    prepareMessage$body$SvgNetworkLoader(context) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.nullable_Uint8List),
        $async$returnValue, $async$self = this, response, client, t1;
      var $async$prepareMessage$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              client = $async$self._loaders$_httpClient;
              t1 = A.zoneClient();
              client = t1 == null ? new A.BrowserClient(new self.AbortController()) : t1;
              $async$goto = 3;
              return A._asyncAwait(client._sendUnstreamed$3("GET", A.Uri_parse($async$self.url, 0, null), $async$self.headers), $async$prepareMessage$1);
            case 3:
              // returning from await.
              response = $async$result;
              client._browser_client$_isClosed = true;
              t1 = client._abortController;
              t1.abort();
              $async$returnValue = response.bodyBytes;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$prepareMessage$1, $async$completer);
    },
    provideSvg$1(message) {
      message.toString;
      return C.C_Utf8Codec.decode$2$allowMalformed(0, message, true);
    },
    get$hashCode(_) {
      var _this = this;
      return A.Object_hash(_this.url, _this.headers, _this.theme, _this.colorMapper, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue, C.C_SentinelValue);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other instanceof B.SvgNetworkLoader)
        t1 = other.url === this.url;
      else
        t1 = false;
      return t1;
    },
    toString$0(_) {
      return "SvgNetworkLoader(" + this.url + ")";
    }
  };
  B.ApplicationLogoWidthTextWidget.prototype = {
    build$1(context) {
      var _null = null,
        value = $.$get$dotenv().maybeGet$2$fallback("PLATFORM", "other"),
        t1 = value.toLowerCase() === "saas" ? "assets/images/ic_logo_with_text_beta.svg" : "assets/images/ic_logo_with_text.svg",
        t2 = this.iconSize;
      if (t2 == null)
        t2 = 33;
      return A.TMailButtonWidget_TMailButtonWidget$fromIcon(C.Color_9Sx, 20, _null, C.Color_9Sx, t1, _null, t2, _null, _null, 1 / 0, _null, this.onTapAction, C.EdgeInsets_0_0_0_0, _null, _null);
    }
  };
  var typesOffset = hunkHelpers.updateTypes([]);
  B.ImageLoaderMixin_buildImage_closure.prototype = {
    call$1(_) {
      return C.CupertinoActivityIndicator_null_true_1_null;
    },
    $signature: 1939
  };
  B.ImageLoaderMixin_buildImage_closure0.prototype = {
    call$3(_, child, loadingProgress) {
      if (loadingProgress != null && loadingProgress.cumulativeBytesLoaded !== loadingProgress.expectedTotalBytes)
        return D.Center_IFX;
      return child;
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 1940
  };
  B.ImageLoaderMixin_buildImage_closure1.prototype = {
    call$3(context, error, stackTrace) {
      var t1, _null = null;
      A.log("ImageLoaderMixin::buildImage:Exception = " + A.S(error), C.Level_1);
      t1 = this.imageSize;
      return A.Container$(C.Alignment_0_0, D.Icon_MYE, C.Clip_0, _null, _null, _null, _null, t1, _null, _null, _null, _null, _null, t1);
    },
    $signature: 1941
  };
  B.NetworkImage__loadAsync_closure.prototype = {
    call$1(e) {
      var t1 = this.request,
        $status = t1.status,
        accepted = $status >= 200 && $status < 300,
        unknownRedirect = $status > 307 && $status < 400,
        success = accepted || $status === 0 || $status === 304 || unknownRedirect,
        t2 = this.completer;
      if (success)
        t2.complete$1(0, t1);
      else {
        t2.completeError$1(e);
        throw A.wrapException(B.NetworkImageLoadException$($status, this.resolved));
      }
    },
    $signature: 82
  };
  B.NetworkImage__loadAsync_closure0.prototype = {
    call$1(e) {
      return this.completer.completeError$1(e);
    },
    $signature: 83
  };
  B.NetworkImage__loadAsync_closure1.prototype = {
    call$2(bytes, total) {
      this.chunkEvents.add$1(0, new B.ImageChunkEvent(bytes, total));
    },
    $signature: 300
  };
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inheritMany = hunkHelpers.inheritMany,
      _inherit = hunkHelpers.inherit;
    _inheritMany(A.Object, [B.ImageLoaderMixin, B.NetworkImageLoadException, B._ImageChunkEvent_Object_Diagnosticable]);
    _inheritMany(A.Closure, [B.ImageLoaderMixin_buildImage_closure, B.ImageLoaderMixin_buildImage_closure0, B.ImageLoaderMixin_buildImage_closure1, B.NetworkImage__loadAsync_closure, B.NetworkImage__loadAsync_closure0]);
    _inherit(B.NetworkImage, A.ImageProvider);
    _inherit(B.NetworkImage__loadAsync_closure1, A.Closure2Args);
    _inherit(B.ImageChunkEvent, B._ImageChunkEvent_Object_Diagnosticable);
    _inherit(B.SvgNetworkLoader, A.SvgLoader);
    _inherit(B.ApplicationLogoWidthTextWidget, A.StatelessWidget);
    _mixin(B._ImageChunkEvent_Object_Diagnosticable, A.Diagnosticable);
  })();
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"NetworkImage":{"ImageProvider":["NetworkImage0"],"ImageProvider.T":"NetworkImage0"},"NetworkImage0":{"ImageProvider":["NetworkImage0"]},"NetworkImageLoadException":{"Exception":[]},"SvgNetworkLoader":{"SvgLoader":["Uint8List"],"BytesLoader":[],"SvgLoader.T":"Uint8List"},"ApplicationLogoWidthTextWidget":{"StatelessWidget":[],"Widget":[],"DiagnosticableTree":[]}}'));
  var type$ = {
    Codec: A.findType("Codec"),
    ImageChunkEvent: A.findType("ImageChunkEvent"),
    ImagePaths: A.findType("ImagePaths0"),
    NativeByteBuffer: A.findType("NativeByteBuffer"),
    SynchronousFuture_NetworkImage: A.findType("SynchronousFuture<NetworkImage>"),
    _AsyncCompleter_JSObject: A.findType("_AsyncCompleter<JSObject>"),
    _Future_JSObject: A.findType("_Future<JSObject>"),
    nullable_Uint8List: A.findType("Uint8List?")
  };
  (function constants() {
    D.Center_IFX = new A.Center(C.Alignment_0_0, null, null, C.CupertinoActivityIndicator_null_true_1_null, null);
    D.Icon_MYE = new A.Icon(C.IconData_57912_false, null, null, null, null);
  })();
};
;
((d, h) => {
  d[h] = d.current;
  d.eventLog.push({p: "main.dart.js_3", e: "endPart", h: h});
})($__dart_deferred_initializers__, "88+kYfdtbD0h3m85fH0Kpbsu9Y8=");
;